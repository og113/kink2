to do:
- write evaluation of linErg, linNum, bound and W
- write check on linearisation
- write check on whether lattice spacing is small enough for energies
- use different method to FT p and find linErg, linNum etc., do this in pi.cc first
- include regularization to reduce time spent near sphaleron

use of pointers etc:
& - "address of" or reference operator
* - "pointer to" or dereference operator

myvar;
pointer = &myvar; //(=address of myvar)
value = *pointer; //(=myvvar)

declaring pointers, use a * after the type, e.g.
int * number;
n.b. the * in the declaration should not be confused with the dereferencing operator

pointers and arrays:
int myarray [20];
int * mypointer;
mypointer = myarray; //a valid expression, mypointer points to the array

examples
// my first pointer
#include <iostream>
using namespace std;

int main ()
{
  int firstvalue, secondvalue;
  int * mypointer;

  mypointer = &firstvalue;
  *mypointer = 10;
  mypointer = &secondvalue;
  *mypointer = 20;
  cout << "firstvalue is " << firstvalue << '\n';
  cout << "secondvalue is " << secondvalue << '\n';
  return 0;
}

// more pointers
#include <iostream>
using namespace std;

int main ()
{
  int firstvalue = 5, secondvalue = 15;
  int * p1, * p2;

  p1 = &firstvalue;  // p1 = address of firstvalue
  p2 = &secondvalue; // p2 = address of secondvalue
  *p1 = 10;          // value pointed to by p1 = 10
  *p2 = *p1;         // value pointed to by p2 = value pointed by p1
  p1 = p2;           // p1 = p2 (value of pointer is copied)
  *p1 = 20;          // value pointed by p1 = 20
  
  cout << "firstvalue is " << firstvalue << '\n';
  cout << "secondvalue is " << secondvalue << '\n';
  return 0;
}

// more pointers
#include <iostream>
using namespace std;

int main ()
{
  int numbers[5];
  int * p;
  p = numbers;  *p = 10;
  p++;  *p = 20;
  p = &numbers[2];  *p = 30;
  p = numbers + 3;  *p = 40;
  p = numbers;  *(p+4) = 50;
  for (int n=0; n<5; n++)
    cout << numbers[n] << ", ";
  return 0;
}


